on:
  push:
    branches: [dev]
    paths:
      - "packages/toolpack/scripts/version.js"
  pull_request:
    types: [opened, synchronize]

name: Release binary

jobs:

  test-unit:
    name: Unit Test Native Code
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 25
      - run: echo ::set-output name=DOCS_CHANGE::$(node skip-docs-change.js echo 'not-docs-only-change')
        id: docs-change
      - name: Install
        if: ${{ steps.docs-change.outputs.DOCS_CHANGE != 'docs only change' }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly-2021-08-12
          profile: minimal
      - run: cd packages/toolpack/src/swc && cargo test
        if: ${{ steps.docs-change.outputs.DOCS_CHANGE != 'docs only change' }}

  release:
    name: publish release
    runs-on: ubuntu-latest
    needs:
      - build-in-native
      - build-in-docker
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    steps:
      # https://github.com/actions/virtual-environments/issues/1187
      - name: tune linux network
        run: sudo ethtool -K eth0 tx off rx off

      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}

      - uses: actions/download-artifact@v2
        with:
          name: shuvi-swc-binaries
          path: packages/toolpack/swc-source/native

      - uses: geekyeggo/delete-artifact@v1
        with:
          name: shuvi-swc-binaries

      - name: Install pnpm
        uses: pnpm/action-setup@v2.1.0
        with:
          version: ^6.31.0

      - run: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
      - run: pnpm install
      - run: node ./packages/toolpack/scripts/publish-native.js $GITHUB_REF

  build-in-docker:
    name: build swc binaries in docker
    runs-on: ubuntu-latest
    needs:
      - build-windows-i686
      - build-windows-aarch64
      - build-linux-musl
      - build-linux-arm7
      - build-linux-aarch64
      - build-linux-aarch64-musl
    steps:
      - run: exit 0

  # Build binaries for publishing
  build-in-native:
    # Build the matrix
    # Can be understood as a for loop
    strategy:
      matrix:
        os: [ubuntu-18.04, macos-latest, windows-latest]
        description: [default]
        include:
          - os: ubuntu-18.04
            target: x86_64-unknown-linux-gnu
            name: linux-x64-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: win32-x64-msvc
          - os: macos-latest
            target: x86_64-apple-darwin
            name: darwin-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: darwin-arm64
            description: m1

    name: shuvi-swc - ${{ matrix.os }} - ${{ matrix.target }} - node@14
    runs-on: ${{ matrix.os }}
    needs:
      - test-unit

    steps:
      # https://github.com/actions/virtual-environments/issues/1187
      - name: tune linux network
        run: sudo ethtool -K eth0 tx off rx off
        if: ${{ matrix.os == 'ubuntu-18.04' }}
      - name: tune windows network
        run: Disable-NetAdapterChecksumOffload -Name * -TcpIPv4 -UdpIPv4 -TcpIPv6 -UdpIPv6
        if: ${{ matrix.os == 'windows-latest' }}
      - name: tune mac network
        run: sudo sysctl -w net.link.generic.system.hwcksum_tx=0 && sudo sysctl -w net.link.generic.system.hwcksum_rx=0
        if: ${{ matrix.os == 'macos-latest' }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2.1.0
        with:
          version: ^6.31.0

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 14
          check-latest: true

      # we use checkout here instead of the build cache since
      # it can fail to restore in different OS'
      - uses: actions/checkout@v2

      # since the repo's dependencies aren't installed we need
      # to install napi globally
      - run: npm i -g @napi-rs/cli@1.2.1

      # install rust for different os
      - name: Install
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2021-08-12
          target: ${{ matrix.target }}

      # path: need cached path
      # key: create when cached, recached if changed
      # v1: only dir
      # v2: can support single file
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: stable-${{ matrix.os }}-node@14-cargo-registry-trimmed-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: stable-${{ matrix.os }}-node@14-cargo-index-trimmed-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache native binary
        id: binary-cache
        uses: actions/cache@v2
        with:
          path: packages/toolpack/swc-source/native/shuvi-swc.${{ matrix.name }}.node
          key: shuvi-swc-nightly-2021-08-12-${{ matrix.target }}-${{ hashFiles('.github/workflows/swc_binary_deploy.yml', 'packages/toolpack/src/swc/**') }}

      # This seems to be mac os cross-compilation m1 mac os
      - name: Cross build aarch64 setup
        if: ${{ matrix.target == 'aarch64-apple-darwin' }}
        run: |
          sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*;
          export CC=$(xcrun -f clang);
          export CXX=$(xcrun -f clang++);
          SYSROOT=$(xcrun --sdk macosx --show-sdk-path);
          export CFLAGS="-isysroot $SYSROOT -isystem $SYSROOT";
      # We use restore-key to pick latest cache.
      # We will not get exact match, but doc says
      # "If there are multiple partial matches for a restore key, the action returns the most recently created cache."
      # So we get latest cache
      - name: Cache built files
        uses: actions/cache@v2
        with:
          path: ./packages/toolpack/src/swc/target
          key: shuvi-swc-cargo-cache-${{ matrix.os }}--${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            shuvi-swc-cargo-cache-${{ matrix.os }}

      # actions/cache@v2: cache-hit Boolean value indicating that an exact match of the key was found.
      # This means recompile if there is no cache hit
      - name: 'Build'
        if: ${{ steps.binary-cache.outputs.cache-hit != 'true' }}
        run: pnpm -- build-native --release --target ${{ matrix.target }}
        env:
          MACOSX_DEPLOYMENT_TARGET: '10.13'
        working-directory: packages/toolpack

      # https://github.com/marketplace/actions/upload-a-build-artifact
      # upload file to this path
      - name: Upload artifact
        uses: actions/upload-artifact@v2.2.4
        with:
          name: shuvi-swc-binaries
          path: packages/toolpack/swc-source/native/shuvi-swc.${{ matrix.name }}.node
          retention-days: 1

      - name: Clear the cargo caches
        run: |
          cargo install cargo-cache --no-default-features --features ci-autoclean
          cargo-cache

  build-windows-i686:
    name: shuvi-swc - windows-i686 - node@14
    runs-on: windows-latest
    needs:
      - test-unit
    env:
      CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 32
      CARGO_PROFILE_RELEASE_LTO: 'false'
    steps:
      - name: Install node x86
        run: |
          choco install nodejs-lts --x86 -y --force
          refreshenv

      - name: Set 32bit Node.js path
        run: |
          echo "C:\\Program Files (x86)\\nodejs" >> $GITHUB_PATH
        shell: bash

      - name: Node.js arch
        run: node -e "console.log(process.arch)"

      # we use checkout here instead of the build cache since
      # it can fail to restore in different OS'
      - uses: actions/checkout@v2

      # since the repo's dependencies aren't installed we need
      # to install napi globally
      - run: npm i -g @napi-rs/cli@1.2.1

      - name: Install pnpm
        uses: pnpm/action-setup@v2.1.0
        with:
          version: ^6.31.0

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2021-08-12
          override: true
          target: i686-pc-windows-msvc

      - name: Cache native binary
        id: binary-cache
        uses: actions/cache@v2
        with:
          path: packages/toolpack/swc-source/native/shuvi-swc.win32-ia32-msvc.node
          key: shuvi-swc-nightly-2021-08-12-win32-ia32-msvc-${{ hashFiles('.github/workflows/swc_binary_deploy.yml', 'packages/toolpack/src/swc/**') }}

      - name: Build
        if: ${{ steps.binary-cache.outputs.cache-hit != 'true' }}
        shell: bash
        run: pnpm -- build-native --release --target i686-pc-windows-msvc
        working-directory: packages/toolpack

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: shuvi-swc-binaries
          path: packages/toolpack/swc-source/native/shuvi-swc.win32-ia32-msvc.node
          retention-days: 1

  build-windows-aarch64:
    name: shuvi-swc - windows-aarch64 - node@14
    runs-on: windows-latest
    needs:
      - test-unit
    steps:
      - name: Install pnpm
        uses: pnpm/action-setup@v2.1.0
        with:
          version: ^6.31.0

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 14

      # we use checkout here instead of the build cache since
      # it can fail to restore in different OS'
      - uses: actions/checkout@v2

      # since the repo's dependencies aren't installed we need
      # to install napi globally
      - run: npm i -g @napi-rs/cli@1.2.1

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2021-08-12
          override: true
          target: aarch64-pc-windows-msvc

      - name: Cache native binary
        id: binary-cache
        uses: actions/cache@v2
        with:
          path: packages/toolpack/swc-source/native/shuvi-swc.win32-arm64-msvc.node
          key: shuvi-swc-nightly-2021-08-12-win32-arm64-msvc-${{ hashFiles('.github/workflows/swc_binary_deploy.yml', 'packages/toolpack/src/swc/**') }}

      - name: Build
        if: ${{ steps.binary-cache.outputs.cache-hit != 'true' }}
        shell: bash
        run: pnpm -- build-native --release --target aarch64-pc-windows-msvc
        working-directory: packages/toolpack

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: shuvi-swc-binaries
          path: packages/toolpack/swc-source/native/shuvi-swc.win32-arm64-msvc.node
          retention-days: 1

  build-linux-musl:
    name: shuvi-swc - linux-musl - node@lts
    runs-on: ubuntu-latest
    needs:
      - test-unit
    steps:
      # we use checkout here instead of the build cache since
      # it can fail to restore in different OS'
      - uses: actions/checkout@v2

      - name: Login to registry
        run: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD $DOCKER_REGISTRY_URL
        env:
          DOCKER_REGISTRY_URL: ghcr.io
          DOCKER_USERNAME: ${{ github.actor }}
          DOCKER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            target/
          key: linux-musl-publish-integration

      - name: Pull docker image
        run: |
          docker pull ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
          docker tag ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine builder

      - name: Cache native binary
        id: binary-cache
        uses: actions/cache@v2
        with:
          path: packages/toolpack/swc-source/native/shuvi-swc.linux-x64-musl.node
          key: shuvi-swc-nightly-2021-08-12-linux-x64-musl-${{ hashFiles('.github/workflows/swc_binary_deploy.yml', 'packages/toolpack/src/swc/**') }}

      - name: 'Build'
        if: ${{ steps.binary-cache.outputs.cache-hit != 'true' }}
        run: |
          docker run --rm -v ~/.cargo/git:/root/.cargo/git -v ~/.cargo/registry:/root/.cargo/registry -v $(pwd)/packages/toolpack:/build -w /build builder sh -c "npm i -g @napi-rs/cli@1.2.1 && pnpm -- build-native --release --target x86_64-unknown-linux-musl"

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: shuvi-swc-binaries
          path: packages/toolpack/swc-source/native/shuvi-swc.linux-x64-musl.node
          retention-days: 1

  build-linux-aarch64:
    name: shuvi-swc - aarch64-unknown-linux-gnu - node@14
    runs-on: ubuntu-18.04
    needs:
      - test-unit
    steps:
      - run: docker run --rm --privileged multiarch/qemu-user-static:register --reset

      - name: Install pnpm
        uses: pnpm/action-setup@v2.1.0
        with:
          version: ^6.31.0

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 14

      # we use checkout here instead of the build cache since
      # it can fail to restore in different OS'
      - uses: actions/checkout@v2

      # since the repo's dependencies aren't installed we need
      # to install napi globally
      - run: npm i -g @napi-rs/cli@1.2.1

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2021-08-12
          override: true
          target: aarch64-unknown-linux-gnu

      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            target/
          key: aarch64-linux-gnu-publish-integration

      - name: Install cross compile toolchain
        run: |
          sudo apt-get update
          sudo apt-get install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu -y

      - name: Cache native binary
        id: binary-cache
        uses: actions/cache@v2
        with:
          path: packages/toolpack/swc-source/native/shuvi-swc.linux-arm64-gnu.node
          key: shuvi-swc-nightly-2021-08-12-linux-arm64-gnu-${{ hashFiles('.github/workflows/swc_binary_deploy.yml', 'packages/toolpack/src/swc/**') }}

      - name: Cross build aarch64
        if: ${{ steps.binary-cache.outputs.cache-hit != 'true' }}
        run: pnpm -- build-native --release --target aarch64-unknown-linux-gnu
        working-directory: packages/toolpack

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: shuvi-swc-binaries
          path: packages/toolpack/swc-source/native/shuvi-swc.linux-arm64-gnu.node
          retention-days: 1

  build-linux-aarch64-musl:
    name: shuvi-swc - aarch64-unknown-linux-musl - node@14
    runs-on: ubuntu-18.04
    needs:
      - test-unit
    steps:
      - name: Install pnpm
        uses: pnpm/action-setup@v2.1.0
        with:
          version: ^6.31.0

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 14

      # we use checkout here instead of the build cache since
      # it can fail to restore in different OS'
      - uses: actions/checkout@v2

      # since the repo's dependencies aren't installed we need
      # to install napi globally
      - run: npm i -g @napi-rs/cli@1.2.1

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2021-08-12
          override: true
          target: aarch64-unknown-linux-musl

      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            target/
          key: aarch64-linux-musl-publish-integration

      - name: Install cross compile toolchain
        run: |
          sudo apt-get update
          sudo apt-get install gcc-aarch64-linux-gnu -y

      - name: Cache native binary
        id: binary-cache
        uses: actions/cache@v2
        with:
          path: packages/toolpack/swc-source/native/shuvi-swc.linux-arm64-musl.node
          key: shuvi-swc-nightly-2021-08-12-linux-arm64-musl-${{ hashFiles('.github/workflows/swc_binary_deploy.yml', 'packages/toolpack/src/swc/**') }}

      - name: Cross build aarch64
        if: ${{ steps.binary-cache.outputs.cache-hit != 'true' }}
        run: pnpm -- build-native --release --target aarch64-unknown-linux-musl
        working-directory: packages/toolpack

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: shuvi-swc-binaries
          path: packages/toolpack/swc-source/native/shuvi-swc.linux-arm64-musl.node
          retention-days: 1

  build-linux-arm7:
    name: shuvi-swc - arm7-unknown-linux-gnu - node@14
    runs-on: ubuntu-18.04
    needs:
      - test-unit
    steps:
      - run: docker run --rm --privileged multiarch/qemu-user-static:register --reset

      - name: Install pnpm
        uses: pnpm/action-setup@v2.1.0
        with:
          version: ^6.31.0

      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: 14

      # we use checkout here instead of the build cache since
      # it can fail to restore in different OS'
      - uses: actions/checkout@v2

      # since the repo's dependencies aren't installed we need
      # to install napi globally
      - run: npm i -g @napi-rs/cli@1.2.1

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly-2021-08-12
          override: true
          target: armv7-unknown-linux-gnueabihf

      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            target/
          key: arm7-linux-gnu-publish-integration

      - name: Install cross compile toolchain
        run: |
          sudo apt-get update
          sudo apt-get install gcc-arm-linux-gnueabihf -y

      - name: Cache native binary
        id: binary-cache
        uses: actions/cache@v2
        with:
          path: packages/toolpack/swc-source/native/shuvi-swc.linux-arm-gnueabihf.node
          key: shuvi-swc-nightly-2021-08-12-linux-arm-gnueabihf-${{ hashFiles('.github/workflows/swc_binary_deploy.yml', 'packages/toolpack/src/swc/**') }}

      - name: Cross build aarch64
        if: ${{ steps.binary-cache.outputs.cache-hit != 'true' }}
        run: pnpm -- build-native --release --target armv7-unknown-linux-gnueabihf
        working-directory: packages/toolpack

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: shuvi-swc-binaries
          path: packages/toolpack/swc-source/native/shuvi-swc.linux-arm-gnueabihf.node
          retention-days: 1
