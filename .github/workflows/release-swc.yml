on:
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]
    paths:
      - 'packages/compiler-swc/package.json'

name: Test and Release SWC binary

env:
  NAPI_CLI_VERSION: 2.10.3
  TURBO_VERSION: 1.3.4
  RUST_TOOLCHAIN: nightly-2022-02-23
  PNPM_VERSION: 7.5.2

jobs:
  check-branch-name:
    if: startsWith(github.head_ref, 'release/swc') && github.event.pull_request.head.repo.id  == github.event.pull_request.base.repo.id
    runs-on: ubuntu-18.04
    steps:
      - run: echo "The head of this PR starts with 'release/swc'"

  test-unit:
    name: Unit Test Native Code
    runs-on: ubuntu-18.04
    needs:
      - check-branch-name
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 25
      - run: echo ::set-output name=DOCS_CHANGE::$(node skip-docs-change.js echo 'not-docs-only-change')
        id: docs-change
      - name: Install
        if: ${{ steps.docs-change.outputs.DOCS_CHANGE != 'docs only change' }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          profile: minimal
      - run: cd packages/compiler-swc && cargo test
        if: ${{ steps.docs-change.outputs.DOCS_CHANGE != 'docs only change' }}

  release:
    name: publish release
    runs-on: ubuntu-latest
    needs:
      - build-native
    env:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    steps:
      # https://github.com/actions/virtual-environments/issues/1187
      - name: tune linux network
        run: sudo ethtool -K eth0 tx off rx off

      - uses: actions/checkout@v2

      - uses: actions/cache@v2
        id: restore-build
        with:
          path: ./*
          key: ${{ github.sha }}

      - uses: actions/download-artifact@v2
        with:
          name: shuvi-swc-binaries
          path: packages/compiler-swc/native

      - uses: geekyeggo/delete-artifact@v1
        with:
          name: shuvi-swc-binaries

      # - name: Install pnpm
      #   uses: pnpm/action-setup@v2.1.0
      #   with:
      #     version: ${{ env.PNPM_VERSION }}

      - run: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
      # - run: pnpm install
      - run: node ./packages/compiler-swc/scripts/publish-native.js $GITHUB_REF

  # Build binaries for publishing
  build-native:
    strategy:
      fail-fast: false
      matrix:
        settings:
          # pnpm is aliased here temporarily until the build docker
          # image is updated past Node.js v14.19 (current 14.18.1)
          - host: macos-latest
            target: 'x86_64-apple-darwin'
            build: |
              npm i -g "@napi-rs/cli@${NAPI_CLI_VERSION}" "turbo@${TURBO_VERSION}" && if [ ! -f $(dirname $(which yarn))/pnpm ]; then ln -s $(which yarn) $(dirname $(which yarn))/pnpm;fi
              turbo run build-native --cache-dir=".turbo" --filter=@shuvi/compiler-swc -- --release
              strip -x packages/compiler-swc/native/shuvi-swc.*.node
          - host: windows-latest
            build: |
              npm i -g "@napi-rs/cli@${NAPI_CLI_VERSION}" "turbo@${TURBO_VERSION}" "pnpm@${PNPM_VERSION}"
              turbo run build-native --cache-dir=".turbo" --filter=@shuvi/compiler-swc -- --release
            target: 'x86_64-pc-windows-msvc'
          - host: windows-latest
            build: |
              npm i -g "@napi-rs/cli@${NAPI_CLI_VERSION}" "turbo@${TURBO_VERSION}" "pnpm@${PNPM_VERSION}"
              turbo run build-native-no-plugin --cache-dir=".turbo" --filter=@shuvi/compiler-swc -- --release --target i686-pc-windows-msvc
            target: 'i686-pc-windows-msvc'
          - host: ubuntu-latest
            target: 'x86_64-unknown-linux-gnu'
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian
            build: >-
              set -e &&
              rustup toolchain install "${RUST_TOOLCHAIN}" &&
              rustup default "${RUST_TOOLCHAIN}" &&
              rustup target add x86_64-unknown-linux-gnu &&
              npm i -g "@napi-rs/cli@${NAPI_CLI_VERSION}" "turbo@${TURBO_VERSION}" && if [ ! -f $(dirname $(which yarn))/pnpm ]; then ln -s $(which yarn) $(dirname $(which yarn))/pnpm;fi &&
              turbo run build-native --cache-dir=".turbo" --filter=@shuvi/compiler-swc -- --release --target x86_64-unknown-linux-gnu &&
              strip packages/compiler-swc/native/shuvi-swc.*.node
          - host: ubuntu-latest
            target: 'x86_64-unknown-linux-musl'
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: >-
              set -e &&
              rustup toolchain install "${RUST_TOOLCHAIN}" &&
              rustup default "${RUST_TOOLCHAIN}" &&
              rustup target add x86_64-unknown-linux-musl &&
              npm i -g "@napi-rs/cli@${NAPI_CLI_VERSION}" "turbo@${TURBO_VERSION}" && if [ ! -f $(dirname $(which yarn))/pnpm ]; then ln -s $(which yarn) $(dirname $(which yarn))/pnpm;fi &&
              turbo run build-native --cache-dir=".turbo" --filter=@shuvi/compiler-swc -- --release --target x86_64-unknown-linux-musl &&
              strip packages/compiler-swc/native/shuvi-swc.*.node
          - host: macos-latest
            target: 'aarch64-apple-darwin'
            build: |
              sudo rm -Rf /Library/Developer/CommandLineTools/SDKs/*;
              export CC=$(xcrun -f clang);
              export CXX=$(xcrun -f clang++);
              SYSROOT=$(xcrun --sdk macosx --show-sdk-path);
              export CFLAGS="-isysroot $SYSROOT -isystem $SYSROOT";
              npm i -g "@napi-rs/cli@${NAPI_CLI_VERSION}" "turbo@${TURBO_VERSION}" && if [ ! -f $(dirname $(which yarn))/pnpm ]; then ln -s $(which yarn) $(dirname $(which yarn))/pnpm;fi
              turbo run build-native --cache-dir=".turbo" --filter=@shuvi/compiler-swc -- --release --target aarch64-apple-darwin
              strip -x packages/compiler-swc/native/shuvi-swc.*.node
          - host: ubuntu-latest
            target: 'aarch64-unknown-linux-gnu'
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-debian-aarch64
            build: >-
              set -e &&
              rustup toolchain install "${RUST_TOOLCHAIN}" &&
              rustup default "${RUST_TOOLCHAIN}" &&
              rustup target add aarch64-unknown-linux-gnu &&
              npm i -g "@napi-rs/cli@${NAPI_CLI_VERSION}" "turbo@${TURBO_VERSION}" && if [ ! -f $(dirname $(which yarn))/pnpm ]; then ln -s $(which yarn) $(dirname $(which yarn))/pnpm;fi &&
              export CC_aarch64_unknown_linux_gnu=/usr/aarch64-unknown-linux-gnu/bin/aarch64-unknown-linux-gnu-gcc &&
              turbo run build-native --cache-dir=".turbo" --filter=@shuvi/compiler-swc -- --release --target aarch64-unknown-linux-gnu &&
              llvm-strip -x packages/compiler-swc/native/shuvi-swc.*.node
          - host: ubuntu-18.04
            target: 'armv7-unknown-linux-gnueabihf'
            setup: |
              sudo apt-get update
              sudo apt-get install gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf -y
            build: |
              npm i -g "@napi-rs/cli@${NAPI_CLI_VERSION}" "turbo@${TURBO_VERSION}" && if [ ! -f $(dirname $(which yarn))/pnpm ]; then ln -s $(which yarn) $(dirname $(which yarn))/pnpm;fi
              turbo run build-native-no-plugin --cache-dir=".turbo" --filter=@shuvi/compiler-swc -- --release --target armv7-unknown-linux-gnueabihf
              arm-linux-gnueabihf-strip packages/compiler-swc/native/shuvi-swc.*.node
          - host: ubuntu-latest
            target: 'aarch64-unknown-linux-musl'
            docker: ghcr.io/napi-rs/napi-rs/nodejs-rust:lts-alpine
            build: >-
              set -e &&
              npm i -g "@napi-rs/cli@${NAPI_CLI_VERSION}" "turbo@${TURBO_VERSION}" && if [ ! -f $(dirname $(which yarn))/pnpm ]; then ln -s $(which yarn) $(dirname $(which yarn))/pnpm;fi &&
              rustup toolchain install "${RUST_TOOLCHAIN}" &&
              rustup default "${RUST_TOOLCHAIN}" &&
              rustup target add aarch64-unknown-linux-musl &&
              turbo run build-native --cache-dir=".turbo" --filter=@shuvi/compiler-swc -- --release --target aarch64-unknown-linux-musl &&
              llvm-strip -x packages/compiler-swc/native/shuvi-swc.*.node
          - host: windows-latest
            target: 'aarch64-pc-windows-msvc'
            build: |
              npm i -g "@napi-rs/cli@${NAPI_CLI_VERSION}" "turbo@${TURBO_VERSION}" "pnpm@${PNPM_VERSION}"
              turbo run build-native-no-plugin --cache-dir=".turbo" --filter=@shuvi/compiler-swc -- --release --target aarch64-pc-windows-msvc --cargo-flags=--no-default-features
    needs:
      - test-unit
    name: stable - ${{ matrix.settings.target }} - node@16
    runs-on: ${{ matrix.settings.host }}
    steps:
      # https://github.com/actions/virtual-environments/issues/1187
      - name: tune linux network
        run: sudo ethtool -K eth0 tx off rx off
        if: ${{ matrix.settings.host == 'ubuntu-18.04' }}
      - name: tune linux network
        run: sudo ethtool -K eth0 tx off rx off
        if: ${{ matrix.settings.host == 'ubuntu-latest' }}
      - name: tune windows network
        run: Disable-NetAdapterChecksumOffload -Name * -TcpIPv4 -UdpIPv4 -TcpIPv6 -UdpIPv6
        if: ${{ matrix.settings.host == 'windows-latest' }}
      - name: tune mac network
        run: sudo sysctl -w net.link.generic.system.hwcksum_tx=0 && sudo sysctl -w net.link.generic.system.hwcksum_rx=0
        if: ${{ matrix.settings.host == 'macos-latest' }}
      # we use checkout here instead of the build cache since
      # it can fail to restore in different OS'
      - uses: actions/checkout@v3
      # We use restore-key to pick latest cache.
      # We will not get exact match, but doc says
      # "If there are multiple partial matches for a restore key, the action returns the most recently created cache."
      # So we get latest cache
      - name: Cache built files
        uses: actions/cache@v3
        with:
          path: ./packages/compiler-swc/target
          key: shuvi-swc-cargo-cache-${{ matrix.settings.target }}--${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            shuvi-swc-cargo-cache-${{ matrix.settings.target }}
      - name: Turbo Cache
        id: turbo-cache
        uses: actions/cache@v3
        with:
          path: .turbo
          key: turbo-${{ github.job }}-${{ github.ref_name }}-${{ matrix.settings.target }}-${{ needs.build.outputs.weekNum }}-${{ github.sha }}
          restore-keys: |
            turbo-${{ github.job }}-${{ github.ref_name }}-${{ matrix.settings.target }}
            turbo-${{ github.job }}-${{ github.ref_name }}-${{ matrix.settings.target }}-${{ needs.build.outputs.weekNum }}-
            turbo-${{ github.job }}-canary-${{ matrix.settings.target }}-${{ needs.build.outputs.weekNum }}-

      - name: Setup node
        uses: actions/setup-node@v3
        if: ${{ !matrix.settings.docker }}
        with:
          node-version: 16
          check-latest: true

      - name: Install
        uses: actions-rs/toolchain@v1
        if: ${{ !matrix.settings.docker }}
        with:
          profile: minimal
          override: true
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          target: ${{ matrix.settings.target }}

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ matrix.settings.target }}-cargo-registry

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ matrix.settings.target }}-cargo-index

      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash

      - name: Build in docker
        uses: addnab/docker-run-action@v3
        if: ${{ matrix.settings.docker }}
        with:
          image: ${{ matrix.settings.docker }}
          options: -e RUST_TOOLCHAIN=${{ env.RUST_TOOLCHAIN }} -e NAPI_CLI_VERSION=${{ env.NAPI_CLI_VERSION }} -e TURBO_VERSION=${{ env.TURBO_VERSION }} -v ${{ env.HOME }}/.cargo/git:/root/.cargo/git -v ${{ env.HOME }}/.cargo/registry:/root/.cargo/registry -v ${{ github.workspace }}:/build -w /build
          run: ${{ matrix.settings.build }}

      - name: 'Build'
        run: ${{ matrix.settings.build }}
        if: ${{ !matrix.settings.docker }}
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: shuvi-swc-binaries
          path: packages/compiler-swc/native/shuvi-swc.*.node
          retention-days: 1
